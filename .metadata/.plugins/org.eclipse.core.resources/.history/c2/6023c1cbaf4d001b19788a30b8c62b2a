package ds.sort;

import java.util.Arrays;

import org.junit.Test;

public class P001_quickSort {

/*	

Partion(arr,left,right)
steps 1-7
returns the partition
 quickSort(){
 int mid = Partion(arr,left,right);
quickSort(arr,left,mid);
quickSort(arr,mid+1,right);
}
	
	
	11,4,7,2,1,3,21,26
	
	1. set pivot
	2. Traverse while left < right
		
			
	
	
*/	
	private int[] solution(int[] input, int left, int right){

		int mid = partition(input, left, right);
		solution(input, left, mid);
		solution(input, mid + 1, right);
		return input;
	}
	
	private int partition(int[] input, int left, int right){
		
//		 1. get the pivot
		int pivot = input[left];
		
		while(left < right){
			
//			increment left until the number >= pivot
			
			if(input[left] <= pivot){
				left++;
			}
			
//			decrement right until the number <= pivot
			
			if(input[right] >= pivot){
				right--;
			}
			
//			swap left and right
			
			if(input[left] >= pivot && input[right] <= pivot && left < right){
				int temp = input[left];
				input[left] = input[right];
				input[right] = temp;
			}			
		}
		
//		 swap input[right] and pivot	
		
		input[0] = input[right];
		input[right]= pivot;
		
		
	
		
		return right;
	}
	
	
	
	@Test
	public void example1(){

//		int[] input = {11,4,7,2,1,3,21,26};
		int[] input = {21, 11, 13, 10, 23, 48, 9, 8};
		System.out.println(Arrays.toString(solution(input, 0, input.length-1)));
	}	
	
	
	
}
