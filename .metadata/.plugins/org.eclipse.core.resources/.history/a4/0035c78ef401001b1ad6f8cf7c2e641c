package ds.string.homework;

import java.util.Arrays;

import org.junit.Test;

public class P004StringPermutation {


	/* 
	 * 
1) Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. 
In other words, one of the first string's permutations is the substring of the second string.

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains on
--

Pseudo-code:

1. Initialize
	k = minimum input length
	char[] s1 = input1.toCharArray();

	m=0;

 	String temp = input2.subString(m,k-1)
	char[] temp1 = temp.toCharArray();
	
2.	Traverse input1 from i=0 till input1.length
		i.	Traverse input2 from j=0 till input1.length
				if(s1[i] == temp1[j])
				count++;
				if(count == k)
				return true;


*/
	
	private String solution(int[] input){
		
		
		return Arrays.toString(input);
	}
	
	@Test
	public void testData1(){

		int input[]= {};

		System.out.println(solution(input));

	}

}
