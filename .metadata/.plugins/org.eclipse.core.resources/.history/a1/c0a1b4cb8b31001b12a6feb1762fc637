package ds.arrays.string.revision;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.junit.Test;

public class P010MovePositiveIntegers {

	/*
1) Write a program to move all the positive numbers to end. 

Input: [4, -1, 9, 0, 2, -4, 5]
Output: [-1, 0, -4, 4, 9, 2, 5]

Algorithm: Use 2 Pointer

Pseudo-code:

Initialize:
- left pointer = 0th index
- right pointer = 1st index


while(right > input.length-1)

if(input[left] > 0 && input[right] <=  0) - swap input[left] with input[right]; left++; right++;
if(input[left] > 0 && input[right] > 0) - swap input[left] with input[right]; right++;




	 */	


	private void solution(int[] input){


		//		Set<Character> set = givenString.chars().mapToObj(i -> (char) i).collect(Collectors.toSet());

		//		List<Integer> list = input.ints().mapToObj(i -> (int) i).collect(Collectors.toList());

		//		List<Integer> list = Arrays.asList(ArrayUtils.toObject(input));

		List<Integer> list = Arrays.stream(input).boxed().collect(Collectors.toList());

		System.out.println(list);
		
		int index=0, i=0;
		
		while(index < list.size()){

			if(list.get(index) <= 0){
				System.out.print(list.remove(index) + " ");
			}
			
			index++;
		}
		
		while(list.size()>0){
			System.out.print(list.remove(0) + " ");
		}
		
		
	}

	@Test
	public void testData1(){

		int input[]= {4, -1, 9, 0, 2, -4, 5};

		solution(input);
//		System.out.println(Arrays.toString(solution(input)));

	}



}
