package ds.string.homework;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.junit.Test;

public class P013PrimeCombination {

	/*	

Given a number, find all the combination of the prime number 
[without changing the sequence]

input:  38
output:  3	

input:  403198305
output:  	

input: 44
output: 

---

pseudo-code:	



	 */	


	private void solution(String input){
		for(int i=0; i<input.length(); i++){
			if((Integer.parseInt(input.substring(i,i+1)))!=0){
				for(int j=i+1; j<input.length(); j++){


					// Converting long to BigInteger 
					BigInteger b = new BigInteger(input.substring(i, j));  // O(N)

					if( b.isProbablePrime(1))
						System.out.println(input.substring(i, j)); 
				} 
			}
		}



	}

	private void solution1(String str, String ans){
		// If string is empty 
		if (str.length() == 0) { 
			System.out.print(ans + " "); 
			return; 
		} 

		for (int i = 0; i < str.length(); i++) { 

			// ith character of str 
			char ch = str.charAt(i); 

			// Rest of the string after excluding  
			// the ith character 
			String ros = str.substring(0, i) +  
					str.substring(i + 1); 

			// Recurvise call 
			solution1(ros, ans + ch); 
		} 
	} 




	//	@Test
	//	public void testData1(){
	//
	//		String input= "38";
	//
	//		solution(input);
	//
	//	}

	@Test
	public void testData2(){

		String input= "403198305";

		solution1(input, "");

	}
}
