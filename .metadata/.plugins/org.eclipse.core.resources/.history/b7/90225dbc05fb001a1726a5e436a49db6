package ds.arrays;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.Test;

public class P007SumSubArraysBF1 {

	/*
	Given an array of integers and a number k. Return the highest sum of any k consecutive elements in the array. // Medium
    [2,4,1,3,5,6,0,1,3,1] k=3 maxSum => 3+5+6 => 14
	 */		

	
	// 1 5 2 3 7 4

	// k =3

	// store inputArray.length = inputLength
	// while loop for checking whther the array can be split into 'K' elements - while( inputLength > k)
	// Add a for loop with length k and starting index as 0
	// get 3 elements and sum it and store it in an variable - 'Max'
	// add startingindex + 1 and inputLength - k

	
	private Set<Integer> getSumOfSubArray(int array[],int k) {
		
		Set<Integer> set=new HashSet<Integer>();
		
		int sum=0;
		
		for(int i=0; i<array.length; i++){
			
			if(array[i] == k ){
				set.add(array[i]);
			}
			
			if(array[i] > k ){
				continue;
			}
			if(array[i] < k ){
				sum += array[i];
					if(sum == k)set.add(array[i]);
					if(sum > k)sum=0;
			}
			
			
			
		}
		
		
		return set;
	}
		
	

	@Test
	public void example1() {
		int[] input= {1,7,4,3,1,2,1,5,1};
		int k=7;
		System.out.println(getSumOfSubArray(input,k));
	}
	
	
	@Test
	public void example2(){

		int[] input = {2,4,1,3,5,6,0,1,3,1};
		int k=3;
		System.out.println(getSumOfSubArray(input,k));
	}

	
	
}
