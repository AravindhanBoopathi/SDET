package ds.string;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

public class P009LongestUniqueSubString {
	
/*
1) Longest Substring Without Repeating Characters
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring. 	


pseudo-code:

BF

Set





 */

	/* 
	 * 
	 * 
	*/
	
	private void solution(String input){
		
//		Set<Character> set = new LinkedHashSet<Character>();
//		
//		for(Character c: input.toCharArray()){
//			
//			set.add(c);
//			
//			
//		}
//		
//		System.out.println(set);
		
		int max = 0;

		List<Character> list = new ArrayList<Character>();
		
		for(Character c: input.toCharArray()){
			if(list.contains(c)){
				max = Math.max(max, list.size());
				list.clear();
			}
			list.add(c);
			max = Math.max(max, list.size());
		}
		
		System.out.println(max);
	}
	
	@Test
	public void testData1(){

		String input = "abcabcbb";

		solution(input);

	}
	
	@Test
	public void testData2(){

		String input = "bbbbb";

		solution(input);

	}
	
	@Test
	public void testData3(){

		String input = "pwwkewwabcdee";

		solution(input);

	}
	
	
}
