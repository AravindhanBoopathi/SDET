package ds.arrays.homework;				

import org.junit.Test;				

public class P007bArrayIntersectionCollections {				


	/*			
	7) Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order,			
	return a sorted array of only the integers that appeared in all three arrays.			

	Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]			
	Output: [1,5]			
	Explanation: Only 1 and 5 appeared in the three arrays.			

	123			
	132			
	213			
	231			
	312			
	321			

	Pseudo code:			
	1) check if all three array length are equal			
		findIntersection(arr1,arr2,arr3)		

	2) check the lowest length array			
		if(arr1.length<arr2.length && arr1.length<arr3.length && arr2<arr3.length)		

		if(arr1.length<arr2.length && arr1.length<arr3.length && arr2>arr3.length)		

		if(arr2.length<arr1.length && arr2.length<arr3.length && arr1<arr3.length)		

		if(arr2.length<arr1.length && arr2.length<arr3.length && arr1>arr3.length)		

		if(arr3.length<arr1.length && arr3.length<arr2.length && arr1<arr2.length)		

		if(arr3.length<arr1.length && arr3.length<arr2.length && arr1>arr2.length)		


	3) findIntersection(low,mid,high)			
		traverse the first array from i=0 to low.length-1		
			i) traverse the second array from j=0 to mid.length-1	
				a) check if low[i]==mid[j]




	 */			

	private void ArrayIntersection(int[] arr1, int[] arr2, int[] arr3) {			
		if(arr1.length == arr2.length && arr1.length == arr3.length){
			findIntersection(arr1, arr2, arr3);
		}

		if(arr1.length<arr2.length && arr1.length<arr3.length && arr2.length<arr3.length)
			findIntersection(arr1,arr2,arr3);		

		if(arr1.length<arr2.length && arr1.length<arr3.length && arr2.length>arr3.length)		
			findIntersection(arr1,arr3,arr2);
				
		if(arr2.length<arr1.length && arr2.length<arr3.length && arr1.length<arr3.length)		
			findIntersection(arr2,arr1,arr3);
					
		if(arr2.length<arr1.length && arr2.length<arr3.length && arr1.length>arr3.length)		
			findIntersection(arr2,arr3,arr1);
						
		if(arr3.length<arr1.length && arr3.length<arr2.length && arr1.length<arr2.length)		
			findIntersection(arr3,arr1,arr2);
		
		if(arr3.length<arr1.length && arr3.length<arr2.length && arr1.length>arr2.length)
			findIntersection(arr3,arr2,arr1);
		
		

	}	

	void findIntersection(int[] low, int[] mid, int[] high){
/*		
		3) findIntersection(low,mid,high)			
		traverse the first array from i=0 to low.length-1		
			i) traverse the second array from j=0 to mid.length-1	
				a) check if low[i]==mid[j]

*/
		for(int i=0; i<low.length; i++){
			for(int j=0; j<mid.length; j++){
				if(low[i]==mid[j])
				for(int k=0; k<high.length; k++){
					if(low[i]==high[k])System.out.print(low[i]+" ");
				}
			}
		}
	
		System.out.println(" ");
	
	}


	@Test			
	public void testData1(){			
		int arr1[]= {1,2,3,4,5},		
				arr2[]= {1,2,5,7,9},		
				arr3[]= {1,3,4,5,8};		
		ArrayIntersection(arr1,arr2,arr3);		
	}			
	@Test			
	public void testData2(){			
		int arr1[]= {-1,1,5},		
				arr2[]= {-1,1,5,7},		
				arr3[]= {-1,1,3,4,5,8};		
		ArrayIntersection(arr1,arr2,arr3);		
	}			
	@Test			
	public void testData3(){			
		int arr1[]= {1,2,4,5},		
				arr2[]= {5,7,9},		
				arr3[]= {1,3,4,5,8,9,};		
		ArrayIntersection(arr1,arr2,arr3);		
	}			
	@Test			
	public void testData4(){			
		int arr1[]= {1,2,3},		
				arr2[]= {5,7,9,10},		
				arr3[]= {2,3,4,5,11};		
		ArrayIntersection(arr1,arr2,arr3);		
	}			




}				
