package ds.string.homework;

import java.util.Arrays;

import org.junit.Test;

public class P004StringPermutation {


	/* 
	 * 
1) Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. 
In other words, one of the first string's permutations is the substring of the second string.

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains on



--

Pseudo-code:
BF:
1. Initialize
	k = minimum input length
	char[] s1 = input1.toCharArray();

	m=0;


2. while(m < input2.length-1)
 	String temp = input2.subString(m,k-1)
	char[] temp1 = temp.toCharArray();
	
	Traverse input1 from i=0 till input1.length
		i.	Traverse input2 from j=0 till input1.length
				if(s1[i] == temp1[j])
				count++;
				if(count == k)
				return true;
	m++;

*/
	
	private Boolean solution(String s1, String s2){
		
		int k = s1.length();
		char[] input1 = s1.toCharArray();
		
		int m=0,count=0;
		
		while(m < s2.length()-2){
			String temp = s2.substring(m, k-1);
			char[] temp1 = temp.toCharArray();
			
			for(int i=0; i<k-1; i++){
				for(int j=0; j<k-1; j++){
					if(input1[i] == temp1[j]){
						count++;
					}
					else{
						count =0;
					}
					if(count == k)
					return true;
				}
			}
			m--;
		}
		
		
		return false;
	}
	
	@Test
	public void testData1(){

		String s1="ab";
		String s2="eidbaooo";

		System.out.println(solution(s1,s2));

	}

}
